import streamlit as st
import pandas as pd
import urllib.parse

# -----------------------------------
# Vari√°veis Globais
# -----------------------------------
USUARIO_PROPRIETARIO = "admin"
SENHA_PROPRIETARIO = "1234"  # Trocar por uma senha segura depois
NUMERO_TELEFONE = "5519998661470"

# -----------------------------------
# DASHBOARD (√°rea do propriet√°rio)
# -----------------------------------
def exibir_dashboard():
    st.title("üìä Dashboard de Vendas")
    st.markdown("Bem-vindo ao painel de controle da **Doces Lalumare**!")

    col1, col2, col3 = st.columns(3)
    col1.metric("Total de Vendas", "R$ 1.250,00")
    col2.metric("Pedidos no M√™s", "42")
    col3.metric("Ticket M√©dio", "R$ 29,76")

    st.subheader("üìà Vendas da Semana")
    dados = {
        "Dia": ["Seg", "Ter", "Qua", "Qui", "Sex", "S√°b", "Dom"],
        "Vendas (R$)": [120, 150, 90, 180, 200, 240, 210]
    }
    df = pd.DataFrame(dados)
    st.bar_chart(df.set_index("Dia"))

    st.subheader("ü•Ñ Adicionais Mais Pedidos")
    dados_adicionais = {
        "Morango": 28,
        "Leite Condensado": 25,
        "Granola Tradicional": 18,
        "Mousse Ninho": 32,
        "Pa√ßoca": 20,
        "Kit Kat": 15,
        "Bis": 12,
        "Trento": 10
    }
    df_adicionais = pd.DataFrame(list(dados_adicionais.items()), columns=["Adicional", "Quantidade de Pedidos"])
    st.bar_chart(df_adicionais.set_index("Adicional"))

    st.subheader("üìã √öltimos Pedidos")
    st.table(pd.DataFrame({
        "Cliente": ["Ana", "Carlos", "Beatriz"],
        "Data": ["20/04", "20/04", "19/04"],
        "Valor": ["R$ 18,00", "R$ 20,00", "R$ 21,50"]
    }))

# -----------------------------------
# CUSTOMIZA√á√ÉO DA P√ÅGINA (CSS)
# -----------------------------------
st.markdown(
    """
    <style>
        /* Fundo geral do app */
        .stApp {
            background-color: #F2BBC5;
        }

        /* Cor da sidebar (lateral onde fica login/senha) */
        section[data-testid="stSidebar"] {
            background-color: #FFFFFF;
        }

        /* T√≠tulos principais (h1, h2, h3) */
        h1, h2, h3 {
            color: #732C4D !important;
        }

        /* T√≠tulo "√Årea do Usu√°rio" */
        .stSidebar .css-1lsbznw {
            color: #ffffff;
        }

        /* Labels dos inputs ("Usu√°rio", "Senha", etc) */
        .stTextInput label,
        .stSelectbox label,
        .stRadio label,
        .stMultiselect label {
            color: #ffffff;
        }

        /* Ajusta cor de par√°grafos e texto em geral */
        p, label, .stRadio > div {
            color: #732C4D !important;
        }

        /* √Årea do usu√°rio e texto branco */
        .stTextInput input,
        .stSelectbox select,
        .stRadio label,
        .stMultiselect div {
            color: white !important;
        }

        /* Bot√µes personalizados */
        button[kind="primary"], button[kind="secondary"] {
            background-color: #4c122d !important;
            color: white !important;
            border: none;
            border-radius: 8px;
        }

        /* Garante que o texto interno dos bot√µes tamb√©m fique branco */
        button[kind="primary"] *, button[kind="secondary"] * {
            color: white !important;
        }
    </style>
    """,
    unsafe_allow_html=True
)

# ------------------------------
# LOGO DO SITE E ESPA√áAMENTO
# ------------------------------

# Imagem no topo da sidebar
st.sidebar.image("Logo.jpg", width=300)

# Espa√ßo entre a imagem e os campos de login
st.sidebar.markdown("<div style='margin-bottom: 230px;'></div>", unsafe_allow_html=True)

# ------------------------------
# √ÅREA DE LOGIN DO PROPRIET√ÅRIO
# ------------------------------
if "logado" not in st.session_state:
    st.session_state.logado = False

# ------------------------------------
# FORMUL√ÅRIO DE LOGIN
# ------------------------------------
with st.sidebar:
    st.markdown("### üë§ √Årea do Propriet√°rio")

    if not st.session_state.logado:
        usuario = st.text_input("Usu√°rio")
        senha = st.text_input("Senha", type="password")

        entrar = st.button("Entrar")

        if entrar:
            if usuario == USUARIO_PROPRIETARIO and senha == SENHA_PROPRIETARIO:
                st.session_state.logado = True
                st.success("Login realizado com sucesso!")
                st.rerun()
            else:
                st.error("Usu√°rio ou senha incorretos.")

    else:
        st.success("Voc√™ est√° logado como propriet√°rio.")
        if st.button("Sair"):
            st.session_state.logado = False
            st.rerun()

# -------------------------------------
# SISTEMA DE PEDIDOS (vis√≠vel a todos)
# -------------------------------------

    # Inicializa√ß√£o do estado da sess√£o
for key in ["tamanho", "adicionais_selecionados", "adicionais_extras_selecionados"]:
    if key not in st.session_state:
        st.session_state[key] = "" if key == "tamanho" else []

if "tamanho_select" not in st.session_state:
    st.session_state.tamanho_select = ""
if "adicionais_selecionados" not in st.session_state:
    st.session_state.adicionais_selecionados = []
if "adicionais_extras_selecionados" not in st.session_state:
    st.session_state.adicionais_extras_selecionados = []
if "nome_input" not in st.session_state:
    st.session_state.nome_input = ""
if "forma_pagamento" not in st.session_state:
    st.session_state.forma_pagamento = None
if "forma_pagamento_radio" not in st.session_state:
    st.session_state.forma_pagamento_radio = None
if "troco_input" not in st.session_state:
    st.session_state.troco_input = ""
if "tipo_pedido_radio" not in st.session_state:
    st.session_state.tipo_pedido_radio = None
if "endereco_input" not in st.session_state:
    st.session_state.endereco_input = ""
if "limpar_pedido_solicitado" not in st.session_state:
    st.session_state.limpar_pedido_solicitado = False

# Verifica se a limpeza foi solicitada e realiza a limpeza antes de renderizar os widgets
if st.session_state.limpar_pedido_solicitado:
    st.session_state.tamanho_select = ""
    st.session_state.adicionais_inclusos_multiselect = []
    st.session_state.adicionais_extras_multiselect = []
    st.session_state.nome_input = ""
    st.session_state.whatsapp_input = ""
    st.session_state.forma_pagamento_radio = None
    st.session_state.troco_input = ""
    st.session_state.tipo_pedido_radio = None
    st.session_state.endereco_input = ""
    st.session_state.limpar_pedido_solicitado = False
    st.rerun()

# ------------------------------
# INTERFACE PRINCIPAL
# ------------------------------
if st.session_state.logado:
    exibir_dashboard()
else:
    st.title("Monte aqui o seu a√ßa√≠ üç®")

    adicionais_inclusos = [
        "Mousse Ninho", "Mousse Ovomaltine", "Mousse Lim√£o", "Mousse Amendoim", "Mousse Morango", "Uva", "Banana", "Morango", "Kiwi", "Amendoim", "Granola Tradicional",
        "Leite Condensado", "Leite em P√≥", "Mel", "Pa√ßoca", "Castanha de Caju", "Cobertura Caramelo", "Cobertura Chocolate", "Cobertura Morango"
    ]

    adicionais_extras = {
        "Bis": 2.00, "Kit Kat": 2.50, "Confete": 2.00,
        "Nescau Ball": 2.00, "Trento": 2.50
    }

    tamanhos_select = ["", "300ml - R$18,00", "500ml - R$20,00"]

    opcoes_inclusos = adicionais_inclusos
    opcoes_extras = [f"{nome} - R${preco:.2f}" for nome, preco in adicionais_extras.items()]

    tamanho_opcao = st.selectbox(
        label="Escolha o tamanho do copo:", 
        options=tamanhos_select,
        index=0 if st.session_state.tamanho_select == "" else tamanhos_select.index(st.session_state.tamanho_select),
        key="tamanho_select"    
    )

    if tamanho_opcao != st.session_state.tamanho_select:
        st.session_state.tamanho_select = tamanho_opcao
        st.session_state.adicionais_selecionados = []
        st.session_state.adicionais_extras_selecionados = []

    tamanhos = {
        "300ml - R$18,00": {"min": 3, "max": 4, "preco": 18.00},
        "500ml - R$20,00": {"min": 3, "max": 6, "preco": 20.00}
    }
    regras = tamanhos.get(st.session_state.tamanho_select, {"min": 0, "max": 0, "preco": 0.00})

    min_adicionais = regras["min"]
    max_adicionais = regras["max"]
    valor_base = regras["preco"]

    adicionais_disabled = st.session_state.tamanho_select == ""
    if adicionais_disabled:
        st.warning("Selecione o tamanho do copo antes de adicionar ingredientes.")

    st.subheader("Escolha seus adicionais")

    novos_adicionais_inclusos_formatados = st.multiselect(
        label="Adicionais inclusos:",
        options=opcoes_inclusos,
        
        default=[],
        disabled=adicionais_disabled,
        key="adicionais_inclusos_multiselect"
    )

    novos_adicionais_extras_formatados = st.multiselect(
        label="Adicionais extras (custo adicional):",
        options=opcoes_extras,
        
        default=[],
        disabled=adicionais_disabled,
        key="adicionais_extras_multiselect"
    )

    st.session_state.adicionais_selecionados = [nome.split(" - ")[0] for nome in novos_adicionais_inclusos_formatados]
    st.session_state.adicionais_extras_selecionados = [nome.split(" - ")[0] for nome in novos_adicionais_extras_formatados]

    total_adicionais = len(st.session_state.adicionais_selecionados) + len(st.session_state.adicionais_extras_selecionados)
    erro_limite = not (min_adicionais <= total_adicionais <= max_adicionais)

    if erro_limite:
        st.error(f"Voc√™ precisa selecionar entre {min_adicionais} e {max_adicionais} adicionais. Selecionados: {total_adicionais}")

    # ------------------------------
    # CAMPOS DO CLIENTE
    # ------------------------------
    st.subheader("Dados do cliente")
    nome = st.text_input("Nome completo:", key="nome_input")
    whatsapp = st.text_input("WhatsApp (formato: (xx) 91234-5678):", key="whatsapp_input")

    # forma_pagamento = st.radio("Forma de pagamento:", ["Cart√£o", "Dinheiro", "PIX"], index=None, key="forma_pagamento_radio")
    forma_pagamento = st.radio("Forma de pagamento:", ["Cart√£o", "Dinheiro", "PIX"], index=st.session_state.forma_pagamento if st.session_state.forma_pagamento in ["Cart√£o", "Dinheiro", "PIX"] else None, key="forma_pagamento_radio")

    # Campo do troco s√≥ aparece se a forma for "Dinheiro"
    troco = st.text_input("Troco para quanto?", key="troco_input") if forma_pagamento == "Dinheiro" else ""

    troco = "N/A" if forma_pagamento == "Cart√£o" or forma_pagamento == "PIX" else troco

    # tipo_pedido = st.radio("Tipo:", ["Retirada", "Entrega"], index=None)
    tipo_pedido = st.radio("Tipo:", ["Retirada", "Entrega"], index=0 if st.session_state.tipo_pedido_radio == "Retirada" else 1 if st.session_state.tipo_pedido_radio == "Entrega" else None, key="tipo_pedido_radio")
   
    endereco = st.text_input("Endere√ßo para entrega:", key="endereco_input") if tipo_pedido == "Entrega" else ""

    endereco = "N/A" if tipo_pedido == "Retirada" else endereco
    
    tamanho = "" if not st.session_state.get('tamanho_select') else st.session_state.get('tamanho_select')

    adicionais_formatados = ""
    for adicional in st.session_state.adicionais_selecionados:
        adicionais_formatados += f"<br> - {adicional}"

    extras_formatados = ""
    for extra in st.session_state.adicionais_extras_selecionados:
        extras_formatados += f"<br> - {extra} - (R${adicionais_extras[extra]:.2f})"

    # ------------------------------
    # C√ÅLCULO DO VALOR TOTAL
    # ------------------------------
    valor_extras = sum(adicionais_extras[nome] for nome in st.session_state.adicionais_extras_selecionados)
    valor_total = valor_base + valor_extras

    # ------------------------------
    # RESUMO DO PEDIDO
    # ------------------------------
    st.markdown("## üßæ Resumo do Pedido")

    resumo_html = f"""
    <div style="background-color: #ffffff; padding: 20px; border-radius: 12px;
        border: 1px solid #ddd; box-shadow: 2px 2px 8px rgba(0,0,0,0.1); margin-top: 10px; color: #000000;">
        <p><strong>üç® Tamanho:</strong> {tamanho or 'N√£o selecionado'}</p>
        <p><strong>‚úîÔ∏è Adicionais Inclusos:</strong> {adicionais_formatados or 'Nenhum'}</p>
        <p><strong>‚ûï Adicionais Extras:</strong> {extras_formatados or 'Nenhum'}</p>
        <br>
        <p><strong>üòé Cliente:</strong> {nome or 'N√£o informado'}</p>
        <p><strong>üì± WhatsApp:</strong> {whatsapp or 'N√£o informado'}</p>
        <br>
        <p><strong>üí≥ Pagamento:</strong> {forma_pagamento or 'N√£o selecionado'}</p>
        <p><strong>üí∞ Troco:</strong> {troco or 'N√£o informado'}</p>
        <p><strong>üõµ Tipo de Pedido:</strong> {tipo_pedido or 'N√£o selecionado'}</p>
        <p><strong>üìå Endere√ßo:</strong> {endereco or 'N√£o informado'}</p>
        <br>
        <br>
        <p><strong> üü¢ Valor Total: R$ {valor_total:.2f}
    </div>
    """

    st.markdown(resumo_html, unsafe_allow_html=True)

    # --------------------------
    # BOT√ÉO DE CONFIRMAR PEDIDO 
    # --------------------------
    confirmar_button_disabled = erro_limite or st.session_state.tamanho_select == ""

    if st.button("‚úÖ Confirmar Pedido", disabled=confirmar_button_disabled, use_container_width=True):
        # Endere√ßo s√≥ √© obrigat√≥rio se o tipo for Entrega
        if not nome:
            st.error("Preencha o nome.")
        elif not whatsapp:
            st.error("Preencha o n√∫mero do Whatsapp.")
        elif not forma_pagamento:
            st.error("Escolha uma forma de pagamento.")
        elif tipo_pedido == "Entrega" and not endereco:
            st.error("Preencha o endere√ßo para a forma de entrega escolhida.")
        elif erro_limite:
            st.error("Quantidade de adicionais fora do limite.")
        else:
            adicionais_inclusos = ', '.join(st.session_state.adicionais_selecionados)
            adicionais_extras_texto = ', '.join(st.session_state.adicionais_extras_selecionados)
            valor_extras = sum([adicionais_extras[nome] for nome in st.session_state.adicionais_extras_selecionados])
            valor_total = valor_base + valor_extras

            # Se for retirada, mostra "Cliente ir√° retirar"
            endereco_texto = endereco if tipo_pedido == "Entrega" else "Cliente ir√° retirar no local"

    # --------------------------
    # INTEGRA√á√ÉO COM O WHATSAPP
    # --------------------------
            mensagem = f"""
Ola! Gostaria de fazer um pedido üòÄ

Meus dados s√£o:
üòé Nome: {nome}
üì± WhatsApp: {whatsapp}
üè° Endere√ßo: {endereco_texto}
üí≥ Forma de pagamento: {forma_pagamento}

E quero um a√ßa√≠ com:
üç® Copo: {tamanho}
‚úîÔ∏è Adicionais inclusos: {adicionais_formatados.replace('<br>','\n')}
‚ûï Adicionais extras: {extras_formatados.replace('<br>','\n')}

Total: R$ {valor_total:.2f}
Troco para: R$ {troco}

Obrigado(a)!"""

            msg_encoded = urllib.parse.quote_plus(mensagem)
            numero_proprietario = NUMERO_TELEFONE
            link_whatsapp = f"https://api.whatsapp.com/send?phone={numero_proprietario}&text={msg_encoded}"

            st.success("Estamos te redirecionando para o WhatsApp...")

            redirecionamento_html = f"""
            <meta http-equiv="refresh" content="1;url={link_whatsapp}">
            <script>
                window.location.href = "{link_whatsapp}";
            </script>
            """
            st.markdown(redirecionamento_html, unsafe_allow_html=True)

    # ----------------
    # BOT√ÉO DE LIMPAR
    # ----------------
    if st.button("Limpar Pedido"):
        
        st.session_state.limpar_pedido_solicitado = True
        st.rerun()